#pragma once

#include <iostream>
#include <tuple>
#include <vector>

#include <opencv2/core/core.hpp>

#include "cubedetector.h"
#include "cubedraweruser.h"

using namespace cv;
using namespace std;

class Cube {

private:
	
	int cube[3][3][3][6];
	Scalar colours[6];
	vector<int> updated;
	vector<string> encoded_directions;

	CubeDetector* cube_detector;

public:

	Cube();
	
	// Initialises the cube with the given positions
	Cube(int positions[6][9]);

	// Initialises the cube with the given positions and colours
	Cube(int positions[6][9], Scalar* colours);

	void setDetector(CubeDetector* cube_detector);

	// Returns the number of directions performed so far
	int getDirectionsSize();

	// Gets the colours of the cube
	void getColours(Scalar output[6]);

	// Sets the colours of the cube
	void setColours(Scalar colours[6]);

	// Sets all values in the cube to be -1
	void reset();

	// Draws cube
	void drawCube();

	// Loads the cube based on the input
	void loadPositions(int input[6][9]);

	// Stores the positions of the cube into input
	void getPositions(int output[6][9]);

	// Rotates the cube clockwise around side
	void rotateCube(int side, int num_rotations, bool show_messages=true);

	// Rotates the cube clockwise whilst looking at side, moving layer depth
	void rotateLayer(int side, int depth, int num_rotations, bool show_messages=true);

	// Rotates a the blocks in the positions given by rotations
	void rotate(tuple<int, int, int, int> rotations[4], int num_rotations);

	// Puts the side on top
	void putOnTop(int side); 

	// Returns the colour of a side
	int getColour(int side);
	
	// Returns the colour of the cube at position (x,y,z) with direction dir
	int getColour(int x, int y, int z, int dir);

	// Returns the colour of the side of a location
	int getColour(int side, tuple<int,int,int> location);

	// Returns the location of the centrepiece of side
	tuple<int,int,int> getCentre(int side);

	// Returns the locations of the side pieces of a side
	vector<tuple<int,int,int>> getSidePieces(int side);

	// Returns a vector of the sides of the block which have stickers
	vector<int> getSides(tuple<int,int,int> location);

	// Returns a vector of the adjacent sides
	vector<int> getAdjacentSides(int side);

	// Generates the encoded string for rotating layer
	string makeStringRotateLayer(int side, int layer, int num_times);

	// Generates the encoded string for rotating cube
	string makeStringRotateCube(int side, int num_rotations);
	
	// Decodes the instructions created by the cube
	void decodeDirections();

	// Simplifies the directions generated by the cube to make them shorter
	void simplifyDirections();
	
	// Draws the current state of the cube
	void drawCube(CubeDrawerUser& cube_drawer_user, vector<vector<pair<int, int>>>& window_positions);

	// Guides the user through a solution of the cube
	void replayMoves(int positions[6][9], Scalar centre_colours[6]);

	// Returns the image of the cube
	Mat getImage();

	// Swaps two pieces of the cube
	void swap(int i, int j, int k, int x, int y, int z);

	// Rotate the piece at (x,y,z)
	void rotate(int x, int y, int z);

	// Returns whether the cube is solved
	bool checkSolved();

};